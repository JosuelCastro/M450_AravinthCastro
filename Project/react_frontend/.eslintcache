[{"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/index.tsx":"1","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/App.tsx":"2","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Router/Router.tsx":"3","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Contexts/ActiveUserContext.tsx":"4","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/config/Api.ts":"5","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Services/AuthorityService.ts":"6","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Services/UserService.ts":"7","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Router/PrivateRoute.tsx":"8","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/UserPage/UserTable.tsx":"9","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/HomePage.tsx":"10","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/LoginPage/LoginPage.tsx":"11","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/UserPage/UserPage.tsx":"12","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/molecules/UserForm/UserForm.tsx":"13","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/organisms/Navbar.tsx":"14","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/UserPage/UserProfile.tsx":"15","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/RegisterPage/RegisterPage.tsx":"16","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Router/Unauthorized.tsx":"17","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/index.tsx":"18","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/App.tsx":"19","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Contexts/ActiveUserContext.tsx":"20","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Router/Router.tsx":"21","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/organisms/Navbar.tsx":"22","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Services/AuthorityService.ts":"23","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Services/UserService.ts":"24","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/config/Api.ts":"25","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Router/PrivateRoute.tsx":"26","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Router/Unauthorized.tsx":"27","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/UserPage/UserProfile.tsx":"28","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/LoginPage/LoginPage.tsx":"29","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/UserPage/UserPage.tsx":"30","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/HomePage.tsx":"31","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/RegisterPage/RegisterPage.tsx":"32","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/UserPage/UserTable.tsx":"33","/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/molecules/UserForm/UserForm.tsx":"34"},{"size":366,"mtime":1693989248014,"results":"35","hashOfConfig":"36"},{"size":369,"mtime":1694092484122,"results":"37","hashOfConfig":"36"},{"size":1878,"mtime":1694610843454,"results":"38","hashOfConfig":"36"},{"size":6222,"mtime":1694614807633,"results":"39","hashOfConfig":"36"},{"size":1749,"mtime":1693989248014,"results":"40","hashOfConfig":"36"},{"size":1128,"mtime":1694610913259,"results":"41","hashOfConfig":"36"},{"size":2009,"mtime":1694615336922,"results":"42","hashOfConfig":"36"},{"size":2247,"mtime":1694614807633,"results":"43","hashOfConfig":"36"},{"size":4743,"mtime":1694614807632,"results":"44","hashOfConfig":"36"},{"size":905,"mtime":1694614807631,"results":"45","hashOfConfig":"36"},{"size":3302,"mtime":1694614807631,"results":"46","hashOfConfig":"36"},{"size":1135,"mtime":1694614807632,"results":"47","hashOfConfig":"36"},{"size":4220,"mtime":1694614807631,"results":"48","hashOfConfig":"36"},{"size":1641,"mtime":1694614807631,"results":"49","hashOfConfig":"36"},{"size":11478,"mtime":1694615196942,"results":"50","hashOfConfig":"36"},{"size":5418,"mtime":1694614807632,"results":"51","hashOfConfig":"36"},{"size":797,"mtime":1694610513746,"results":"52","hashOfConfig":"36"},{"size":366,"mtime":1693989248014,"results":"53","hashOfConfig":"54"},{"size":369,"mtime":1694092484122,"results":"55","hashOfConfig":"54"},{"size":6222,"mtime":1694614807633,"results":"56","hashOfConfig":"54"},{"size":1878,"mtime":1694610843454,"results":"57","hashOfConfig":"54"},{"size":1641,"mtime":1694614807631,"results":"58","hashOfConfig":"54"},{"size":1128,"mtime":1694610913259,"results":"59","hashOfConfig":"54"},{"size":2009,"mtime":1694615336922,"results":"60","hashOfConfig":"54"},{"size":1749,"mtime":1693989248014,"results":"61","hashOfConfig":"54"},{"size":2248,"mtime":1698738060950,"results":"62","hashOfConfig":"54"},{"size":797,"mtime":1694610513746,"results":"63","hashOfConfig":"54"},{"size":11478,"mtime":1694615196942,"results":"64","hashOfConfig":"54"},{"size":3302,"mtime":1694614807631,"results":"65","hashOfConfig":"54"},{"size":1135,"mtime":1694614807632,"results":"66","hashOfConfig":"54"},{"size":877,"mtime":1698737092403,"results":"67","hashOfConfig":"54"},{"size":5418,"mtime":1694614807632,"results":"68","hashOfConfig":"54"},{"size":4743,"mtime":1694614807632,"results":"69","hashOfConfig":"54"},{"size":4220,"mtime":1694614807631,"results":"70","hashOfConfig":"54"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},"109glga",{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"73"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"73"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"73"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"73"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"73"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"73"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q6ute8",{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/index.tsx",[],["147","148"],"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/App.tsx",[],"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Router/Router.tsx",[],"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Contexts/ActiveUserContext.tsx",["149","150"],"import { createContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../config/Api\";\nimport roles from \"../config/Roles\";\nimport AuthorityService from \"../Services/AuthorityService\";\nimport UserService from \"../Services/UserService\";\nimport { User } from \"../types/models/User.model\";\nimport { Nullable } from \"../types/Nullable\";\nimport {UserProfile} from \"../types/models/UserProfile.model\";\n\n/**\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\n * activeUser gets stored.\n */\nexport const USER_DATA_LOCAL_STORAGE_KEY = \"user\";\nexport const TOKEN_LOCAL_STORAGE_KEY = \"token\";\n\n/**\n * ActiveUserContextType defines the provided values\n */\ntype ActiveUserContextType = {\n  user: Nullable<User>;\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  setActiveUser: (user: { profile: {} }) => void;\n  loadActiveUser: () => void;\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\n};\n\n/**\n * noContextProviderFound is a method that throws an error and is used\n * inside the defaultContextValue\n */\nconst noContextProviderFound = () => {\n  throw new Error(\"No provider for the ActiveUserContext found\");\n};\n\n/**\n * defaultContextValue defines the default values for the ActiveUserContext.\n */\nconst defaultContextValue: ActiveUserContextType = {\n  user: null,\n  login: noContextProviderFound,\n  logout: noContextProviderFound,\n  setActiveUser: noContextProviderFound,\n  loadActiveUser: noContextProviderFound,\n  checkRole: noContextProviderFound,\n};\n\n/**\n * ActiveUserContext has the purpose of providing the currently active user\n * as well as related values, modifiers and related operations such as login\n * and logout.\n */\nconst ActiveUserContext =\n  createContext<ActiveUserContextType>(defaultContextValue);\nexport default ActiveUserContext;\n\n/**\n * Props for the ActiveUserContextProvider Component\n */\ntype ActiveUserContextProviderProps = {\n  children: React.ReactNode;\n};\n\n/**\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\n * to all child-components.\n * @param children consists of all the elements that are located inside the\n */\nexport const ActiveUserContextProvider = ({\n  children,\n}: ActiveUserContextProviderProps) => {\n  /**\n   * Try to load the user data that is stored inside the LocalStorage.\n   * If non is present, null will be returned.\n   */\n  const loadSavedUserData = (): Nullable<User> => {\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\n    if (storeUser === null) return null;\n    return JSON.parse(storeUser);\n  };\n\n  // The following line defines the user state which is holding the user\n  // data inside this context.\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\n  const navigate = useNavigate();\n  /**\n   * Update the user that is provided by the ActiveUserContext\n   * @param updatedUser\n   */\n  const setActiveUser = (updatedUser: User) => {\n    setUser(updatedUser);\n    localStorage.setItem(\n        USER_DATA_LOCAL_STORAGE_KEY,\n        JSON.stringify(updatedUser)\n    );\n  };\n\n  /**\n   * Remove all user and authorization related data from the localStorage\n   */\n  const resetAuthorization = () => {\n    // Reset the stored data inside the AuthorityService.\n    AuthorityService.clearAuthorities();\n    // Clear all data from the localStorage.\n    localStorage.clear();\n    // Set the user, which is stored inside the context to null.\n    setUser(null);\n  };\n\n  /**\n   * Logout the currently active user by resetting the stored user data\n   * and redirecting to the LoginPage.\n   */\n  const logout = () => {\n    // If no token is saved inside the local storage clear the localStorage directly\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\n      resetAuthorization();\n      return;\n    }\n    // If a token is present send a logout-request and clear the localStorage afterwards\n    api.get(\"/user/logout\").finally(resetAuthorization);\n    //navigate to login page\n    navigate(\"/user/login\");\n  };\n\n  /**\n   * Login with the provided credentials. If successful the current user gets\n   * updated and stored inside the context. Also the JWT-Token for further\n   * request based authentication is stored inside the localStorage.\n   * @param email\n   * @param password\n   */\n  const login = async (email: string, password: string) => {\n    await api.post(\"/user/login\", { email, password }).then((response: any) => {\n      console.log(response.headers.authorization);\n      localStorage.setItem(\n        TOKEN_LOCAL_STORAGE_KEY,\n        response.headers.authorization\n      );\n      setActiveUser(response.data);\n      return true;\n    });\n    return false;\n  };\n\n  /**\n   * Request the user data for the currently active user from the api\n   * and save it to the context-state.\n   */\n  const loadActiveUser = () => {\n    return user\n      ? UserService.getUser(user.id).then((res: any) => {\n          setActiveUser(res);\n        })\n      : null;\n  };\n\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\n  }\n\n  /**\n   * Try to load the user-object from the localStorage if present.\n   * This is done automatically on the first render of this component.\n   */\n  useEffect(() => {\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\n    if (token !== null) {\n      loadActiveUser();\n    }\n  }, []);\n\n  /**\n   * If the user state is updated and the user is not equal to null,\n   * the data used in the AuthorityService as well as the data stored inside\n   * the localStorage will be updated with the new user-data.\n   */\n  useEffect(() => {\n    if (user !== null) {\n      AuthorityService.initAuthoritySet(user);\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\n    }\n  }, [user]);\n\n\n  return (\n    <div>\n      <ActiveUserContext.Provider\n        value={{\n          user,\n          // @ts-ignore\n          setActiveUser,\n          login,\n          logout,\n          loadActiveUser,\n          checkRole: activeUserHasRole,\n        }}\n      >\n        {children}\n      </ActiveUserContext.Provider>\n    </div>\n  );\n};\n","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/config/Api.ts",[],"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Services/AuthorityService.ts",[],"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Services/UserService.ts",[],"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Router/PrivateRoute.tsx",["151","152"],"import React, { useContext } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport * as jwt from 'jsonwebtoken';\nimport ActiveUserContext from '../Contexts/ActiveUserContext';\nimport AuthorityService from '../Services/AuthorityService';\nimport { Authority } from '../types/models/Authority.model';\nimport { Button } from '@mui/material';\n\ninterface Props {\n  element: React.ReactElement;\n  authorities: string[];\n}\n\ntype JWTType = {\n  iss: string;\n  exp: number;\n};\n\nconst PrivateRoute: React.FC<Props> = ({\n  element: RouteComponent,\n  authorities,\n}) => {\n  const activeUserContext = useContext(ActiveUserContext);\n  /**\n   * isLoggedIn checks if the token, which is saved inside the localStorage,\n   * exists, isn't expired yet and has been issued by the correct issuer.\n   * If all of the above is true the user is seen as logged in.\n   */\n  const isLoggedIn = () => {\n    let tokenString = localStorage.getItem('token');\n    if (!tokenString) {\n      console.error('no token found');\n      return false;\n    }\n    tokenString = tokenString.replace('Bearer ', '');\n    const token: JWTType = jwt.decode(tokenString) as JWTType;\n    // Check if token does not exist or doesn't have an expiration claim or is expired.\n    if (!token || !token.exp || token.exp < Date.now() / 1000) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * If the user is not logged in call activeUserContext.logout, which destroys\n   * all locally saved user data and redirects to /login.\n   */\n  if (!isLoggedIn()) {\n    activeUserContext.logout();\n    return <Navigate to='/user/login' replace={true} />;\n  }\n  /**\n   * Check if the active user has at least 1 of the needed authorities.\n   * If no authorities are needed true is returned.\n   */\n  const hasNeededAuthorities =\n    authorities.length === 0 || authorities.some(AuthorityService.hasAuthority);\n\n  /**\n   * If the user doesn't possess the needed authorities Redirect the user to\n   * /unauthorized\n   */\n  if (!hasNeededAuthorities) {\n    return <Navigate to='/unauthorized' replace={true} />;\n  }\n\n  // All checks passed\n  return (\n    //Pagelayout puts the Navigation, Menu etc. around the component\n    <div>\n      {RouteComponent}\n    </div>\n  );\n};\nexport default PrivateRoute;\n","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/UserPage/UserTable.tsx",["153"],"import React, {useContext, useEffect, useState} from 'react';\nimport {\n    Card,\n    Button,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TablePagination,\n} from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport UserService from '../../../Services/UserService';\nimport { User } from '../../../types/models/User.model';\nimport activeUserContext from \"../../../Contexts/ActiveUserContext\";\nimport ActiveUserContext from \"../../../Contexts/ActiveUserContext\";\n\nconst UserTable = () => {\n    const activeUserContext = useContext(ActiveUserContext);\n    const navigate = useNavigate();\n    const [users, setUsers] = useState<User[]>([]);\n    const [page, setPage] = useState(0);\n    const rowsPerPage = 5;\n\n    useEffect(() => {\n        // Fetch users with pagination parameters\n        loadUsers(page);\n    }, [page]);\n\n    const loadUsers = (currentPage: number) => {\n        UserService.getAllUsers(currentPage, rowsPerPage)\n            .then((data) => {\n                setUsers(data);\n            })\n            .catch((error) => {\n                console.error('Error fetching users:', error);\n            });\n    };\n\n    const handleAdd = () => {\n        navigate('../useradd');\n    };\n\n    const handleDelete = (id: string | undefined) => {\n        // Check if the user to delete is the same as the currently logged-in user\n        const loggedInUserId = activeUserContext.user?.id;\n        if (id === loggedInUserId) {\n            // Display an alert if the user is trying to delete their own account\n            alert(\"You can't delete your own account.\");\n            return;\n        }\n\n        // Continue with the deletion if it's not the logged-in user's account\n        UserService.deleteUser(id)\n            .then(() => {\n                // After deleting, fetch the updated user list\n                loadUsers(page);\n            })\n            .catch((error) => {\n                console.error('Error deleting user:', error);\n            });\n    };\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleLoadMore = () => {\n        // Increment the page to load the next set of users\n        setPage(page + 1);\n    };\n\n    return (\n        <>\n            <TableContainer component={Card}>\n                <Table aria-label='User Table'>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Username</TableCell>\n                            <TableCell>Email</TableCell>\n                            <TableCell>Address</TableCell>\n                            <TableCell>Birthdate</TableCell>\n                            <TableCell>Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {users.map((user) => (\n                            <TableRow key={user.id}>\n                                <TableCell>{user.username}</TableCell>\n                                <TableCell>{user.email}</TableCell>\n                                <TableCell>{user.profile?.address || 'No profile created yet'}</TableCell>\n                                <TableCell>{user.profile?.birthdate || 'No profile created yet'}</TableCell>\n                                <TableCell>\n                                    <Button\n                                        size='small'\n                                        color='error'\n                                        variant='contained'\n                                        onClick={() => {\n                                            handleDelete(user.id);\n                                        }}\n                                    >\n                                        Delete\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n\n                </Table>\n            </TableContainer>\n            <TablePagination\n                component='div'\n                count={users.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n            />\n            <Button size='small' color='success' variant='contained' onClick={handleAdd}>\n                Add\n            </Button>\n            <Button\n                size='small'\n                color='primary'\n                variant='contained'\n                onClick={handleLoadMore}\n                disabled={users.length < rowsPerPage}\n            >\n                Load More\n            </Button>\n        </>\n    );\n};\n\nexport default UserTable;\n","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/HomePage.tsx",[],"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/LoginPage/LoginPage.tsx",[],"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/UserPage/UserPage.tsx",[],"/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/molecules/UserForm/UserForm.tsx",["154"],"import React from 'react';\nimport { useFormik } from 'formik';\nimport { Box, Button, TextField, Typography } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { object, string } from 'yup';\nimport UserService from '../../../Services/UserService';\nimport { User } from '../../../types/models/User.model';\n\ninterface UserProps {\n    user: User;\n    submitActionHandler: (values: User) => void;\n}\n\nconst UserForm = ({ user, submitActionHandler }: UserProps) => {\n    const navigate = useNavigate();\n\n    const formik = useFormik({\n        initialValues: {\n            id: '',\n            username: '',\n            profile: { address: '', id: '', profilePicture: '', birthdate: '' },\n            email: '',\n            password: '',\n            roles: [],\n        },\n        validationSchema: object({\n            username: string().required('Username is required').min(2).max(50),\n            email: string().required('Email is required').email('Invalid email'),\n            password: string().required('Password is required').min(4, 'Password must be at least 4 characters'),\n        }),\n        onSubmit: async (values: User) => {\n            try {\n                const newUser = await UserService.registerUser(values);\n                // Handle successful registration (e.g., show a success message)\n                alert('User registered');\n            } catch (error) {\n                // Handle registration error (e.g., display an error message)\n                alert('Error registering user');\n            }\n        },\n    });\n\n    return (\n        <Box sx={{ maxWidth: 400, margin: '0 auto' }}>\n            <Typography variant=\"h5\" gutterBottom>\n                User Registration\n            </Typography>\n            <form onSubmit={formik.handleSubmit}>\n                <TextField\n                    id=\"username\"\n                    label=\"Username\"\n                    variant=\"outlined\"\n                    fullWidth\n                    sx={{ marginBottom: 2 }}\n                    onBlur={formik.handleBlur}\n                    onChange={formik.handleChange}\n                    error={Boolean(formik.touched.username && formik.errors.username)}\n                    value={formik.values.username}\n                    helperText={formik.touched.username && formik.errors.username}\n                />\n\n                <TextField\n                    id=\"email\"\n                    label=\"E-Mail\"\n                    variant=\"outlined\"\n                    fullWidth\n                    sx={{ marginBottom: 2 }}\n                    onBlur={formik.handleBlur}\n                    onChange={formik.handleChange}\n                    error={Boolean(formik.touched.email && formik.errors.email)}\n                    value={formik.values.email}\n                    helperText={formik.touched.email && formik.errors.email}\n                />\n\n                <TextField\n                    id=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    variant=\"outlined\"\n                    fullWidth\n                    sx={{ marginBottom: 2 }}\n                    onBlur={formik.handleBlur}\n                    onChange={formik.handleChange}\n                    error={Boolean(formik.touched.password && formik.errors.password)}\n                    value={formik.values.password}\n                    helperText={formik.touched.password && formik.errors.password}\n                />\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"submit\"\n                    fullWidth\n                    disabled={!(formik.dirty && formik.isValid)}\n                    sx={{ marginTop: 2 }}\n                >\n                    Register\n                </Button>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"error\"\n                    fullWidth\n                    onClick={() => {\n                        navigate('/users');\n                    }}\n                    sx={{ marginTop: 1 }}\n                >\n                    Cancel\n                </Button>\n            </form>\n        </Box>\n    );\n};\n\nexport default UserForm;\n","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/organisms/Navbar.tsx",["155"],"import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ActiveUserContext from \"../../Contexts/ActiveUserContext\";\nimport logo from '../../logo1.png';\nimport {Button} from \"@mui/material\"; // Import the logo image\n\nconst Navbar = () => {\n    const { user, logout } = useContext(ActiveUserContext);\n\n    return (\n        <nav className=\"navbar\">\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                    <img src={logo} alt=\"Logo\" className=\"logo-image\" />\n                </li>\n                <li className=\"nav-item\">\n                    <Link to=\"/\" className=\"nav-link\">\n                        Home\n                    </Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link to=\"/userprofile\" className=\"nav-link\">\n                        Profile\n                    </Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link to=\"/users\" className=\"nav-link\">\n                        Admin\n                    </Link>\n                </li>\n                <li className=\"nav-item right-most\">\n                    {user ? (\n                        <button style={{backgroundColor:\"transparent\"}} className=\"nav-link\" onClick={logout}>\n                            Logout\n                        </button>\n                    ) : (\n                        <Link to=\"/user/login\" className=\"nav-link\">\n                            Login\n                        </Link>\n                    )}\n                </li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/UserPage/UserProfile.tsx",["156"],"import React, { useContext, useEffect, useState } from 'react';\nimport {\n    Card,\n    CardContent,\n    CardActions,\n    Button,\n    TextField,\n    Typography,\n    Grid,\n    Box,\n    Paper,\n    Avatar,\n    Container,\n    Modal,\n    Fade,\n} from '@mui/material';\nimport UserService from '../../../Services/UserService';\nimport ActiveUserContext from '../../../Contexts/ActiveUserContext';\nimport { User } from '../../../types/models/User.model';\n\nconst UserProfile = () => {\n    const activeUserContext = useContext(ActiveUserContext);\n\n    // State for edit mode\n    const [isEditing, setIsEditing] = useState(false);\n\n    // State for the modal\n    const [openModal, setOpenModal] = useState(false);\n\n    // State for the new URL with a default value of an empty string\n    const [newPicURL, setNewPicURL] = useState(activeUserContext.user?.profile?.profilePicture || 'https://upload.wikimedia.org/wikipedia/en/thumb/a/a9/MarioNSMBUDeluxe.png/220px-MarioNSMBUDeluxe.png');\n\n    // Function to handle changes to user data\n    const handleUserDataChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        // Get the current user from the context\n        const currentUser = activeUserContext.user as User;\n\n        // Create a new User object with updated data\n        const updatedUser: User = {\n            ...currentUser,\n            [name]: value,\n        };\n\n        // Update the user data in the ActiveUserContext\n        activeUserContext.setActiveUser(updatedUser);\n    };\n    const handleUserProfileDataChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        const { name, value } = event.target;\n        // Get the current user from the context\n        const currentUser = activeUserContext.user as User;\n\n        // Create a new User object with updated data\n        const updatedUser: User = {\n            ...currentUser,\n            profile: {\n                ...currentUser.profile,\n                [name]: value,\n            },\n        };\n\n        // Update the user data in the ActiveUserContext\n        activeUserContext.setActiveUser(updatedUser);\n    };\n\n    // Function to handle opening the modal\n    const handleOpenModal = () => {\n        setOpenModal(true);\n    };\n\n    // Function to handle closing the modal\n    const handleCloseModal = () => {\n        setOpenModal(false);\n    };\n\n    // Function to handle changing the URL\n\n    const handleSaveChanges = () => {\n        // Create a copy of the user's profile\n        const updatedProfile = { ...user?.profile };\n\n        // Update individual fields in the profile as needed\n        updatedProfile.address = user?.profile.address; // Assuming user.address is the updated address value\n        updatedProfile.birthdate = user?.profile.birthdate; // Assuming user.birthdate is the updated birthdate value\n        updatedProfile.profilePicture = newPicURL;\n\n        // Create a copy of the user with the updated profile\n        const updatedUserData = {\n            ...user,\n            profile: updatedProfile,\n\n        };\n\n        // Update the user data in the ActiveUserContext\n        activeUserContext.setActiveUser(updatedUserData);\n\n        // Send the updated user data to the server using the UserService\n        UserService.updateUser(updatedUserData)\n            .then((updatedUser) => {\n                // Handle success, if needed\n                console.log('User data updated on the server:', updatedUser);\n            })\n            .catch((error) => {\n                // Handle errors, if needed\n                console.error('Error updating user data:', error);\n            });\n\n        // Set isEditing to false after saving\n        setIsEditing(false);\n    };\n\n    // Use the active user data from the ActiveUserContext\n    const user = activeUserContext.user;\n\n    useEffect(() => {\n        console.log('UserProfile component mounted');\n        activeUserContext.loadActiveUser();\n\n        const userId = activeUserContext.user?.id;\n        if (userId) {\n            console.log('Fetching user data for userId:', userId);\n            UserService.getUserByID(userId)\n                .then((userData) => {\n                    if (userData) {\n                        console.log('User data loaded:', userData);\n                        // Update the user data in the ActiveUserContext\n                        activeUserContext.setActiveUser(userData);\n                    }\n                })\n                .catch((error) => {\n                    // Handle errors if necessary\n                    console.error('Error fetching user data:', error);\n                });\n        }\n    }, []);\n\n\n    return (\n        <Container maxWidth=\"md\">\n            <Paper elevation={3}>\n                <Box p={3}>\n                    <Typography variant=\"h5\" component=\"div\">\n                        User Profile\n                    </Typography>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} md={6}>\n                            <Card>\n                                <CardContent>\n                                    <Avatar\n                                        alt=\"User Avatar\"\n                                        src={user?.profile?.profilePicture || \"https://upload.wikimedia.org/wikipedia/en/thumb/a/a9/MarioNSMBUDeluxe.png/220px-MarioNSMBUDeluxe.png\"}\n                                        sx={{ width: 150, height: 150 }}\n                                        onClick={handleOpenModal}\n                                        style={{ cursor: 'pointer' }}\n                                    />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                        <Grid item xs={12} md={6}>\n                            <form>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Username\"\n                                            name=\"username\"\n                                            value={user?.username || ''}\n                                            onChange={handleUserDataChange}\n                                            disabled={!isEditing}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Email\"\n                                            name=\"email\"\n                                            value={user?.email || ''}\n                                            onChange={handleUserDataChange}\n                                            disabled={!isEditing}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Address\"\n                                            name=\"address\"\n                                            defaultValue={user?.profile?.address || ''}\n                                            onChange={handleUserProfileDataChange}\n                                            disabled={!isEditing}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Birthdate\"\n                                            name=\"birthdate\"\n                                            defaultValue={user?.profile?.birthdate || ''}\n                                            onChange={handleUserProfileDataChange}\n                                            disabled={!isEditing}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Password\"\n                                            name=\"password\"\n                                            type=\"password\"\n                                            defaultValue={user?.password || ''}\n                                            onChange={handleUserDataChange}\n                                            disabled={!isEditing}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </form>\n                        </Grid>\n                    </Grid>\n                    <CardActions>\n                        {isEditing ? (\n                            <Button onClick={handleSaveChanges}>Save</Button>\n                        ) : (\n                            <Button onClick={() => setIsEditing(true)}>Edit</Button>\n                        )}\n                    </CardActions>\n                </Box>\n            </Paper>\n            <Modal\n                open={openModal}\n                onClose={handleCloseModal}\n                aria-labelledby=\"modal-title\"\n                aria-describedby=\"modal-description\"\n                closeAfterTransition\n                style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                }}\n            >\n                <Fade in={openModal}>\n                    <div\n                        className=\"modal-content\"\n                        style={{\n                            backgroundColor: 'white',\n                            width: '300px',\n                            padding: '20px',\n                            borderRadius: '5px',\n                            textAlign: 'center',\n                        }}\n                    >\n                        <h2 id=\"modal-title\">Change Profile Picture URL</h2>\n                        <TextField\n                            fullWidth\n                            label=\"New URL\"\n                            name=\"profilePicture\"\n                            defaultValue={newPicURL}\n                            onChange={(event)=>{setNewPicURL(event.target.value);handleUserProfileDataChange(event)}}\n                            style={{ marginBottom: '10px' }}\n                        />\n                        <Button\n                            variant=\"contained\"\n                            style={{ marginRight: '10px' }}\n                            onClick={() => setOpenModal(false)}\n                        >\n                            Save\n                        </Button>\n                        <Button\n                            onClick={handleCloseModal}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                        >\n                            Cancel\n                        </Button>\n                    </div>\n                </Fade>\n            </Modal>\n        </Container>\n    );\n};\n\nexport default UserProfile;\n","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/components/pages/RegisterPage/RegisterPage.tsx",["157"],"import React from 'react';\nimport { useFormik } from 'formik';\nimport { User } from '../../../types/models/User.model';\nimport { Box, Button, Card, CardContent, CardHeader, TextField, Typography, Container } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { object, string } from 'yup';\nimport UserService from '../../../Services/UserService';\n\nconst RegisterPage = () => {\n    const navigate = useNavigate();\n\n    const formik = useFormik({\n        initialValues: {\n            id: '',\n            username: '',\n            profile: { address: '', id: '', profilePicture: '', birthdate: '' },\n            email: '',\n            password: '',\n            roles: []\n        },\n        validationSchema: object({\n            username: string().required().min(2).max(50),\n            email: string().required().email(),\n            // Add validation for other properties\n        }),\n        onSubmit: async (values: User) => {\n            try {\n                const newUser = await UserService.registerUser(values);\n                navigate(\"/\")\n                // Handle successful registration (e.g., show a success message)\n                alert('User registered');\n            } catch (error) {\n                // Handle registration error (e.g., display an error message)\n                alert('Error registering user');\n            }\n        },\n    });\n\n    return (\n        <Container\n            sx={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '80vh',\n            }}\n        >\n            <Card>\n                <CardHeader title=\"Register\" />\n                <CardContent>\n                    <form onSubmit={formik.handleSubmit}>\n                        <Box sx={{ paddingTop: '15px' }}>\n                            <TextField\n                                id='username'\n                                label='Username'\n                                variant='outlined'\n                                sx={{ marginBottom: '10px' }}\n                                onBlur={formik.handleBlur}\n                                onChange={formik.handleChange}\n                                error={Boolean(formik.touched.username && formik.errors.username)}\n                                value={formik.values.username}\n                                fullWidth\n                            />\n                            {formik.errors.username && formik.touched.username ? (\n                                <Typography variant=\"body2\" color=\"error\">\n                                    {formik.errors.username}\n                                </Typography>\n                            ) : null}\n                            <TextField\n                                id='email'\n                                label='E-Mail'\n                                variant='outlined'\n                                sx={{ marginBottom: '10px' }}\n                                onBlur={formik.handleBlur}\n                                onChange={formik.handleChange}\n                                error={Boolean(formik.touched.email && formik.errors.email)}\n                                value={formik.values.email}\n                                fullWidth\n                            />\n                            {formik.errors.email && formik.touched.email ? (\n                                <Typography variant=\"body2\" color=\"error\">\n                                    {formik.errors.email}\n                                </Typography>\n                            ) : null}\n                            <TextField\n                                id='password'\n                                label='Password'\n                                variant='outlined'\n                                sx={{ marginBottom: '10px' }}\n                                onBlur={formik.handleBlur}\n                                onChange={formik.handleChange}\n                                error={Boolean(formik.touched.password && formik.errors.password)}\n                                value={formik.values.password}\n                                fullWidth\n                                type=\"password\"\n                            />\n                            {formik.errors.password && formik.touched.password ? (\n                                <Typography variant=\"body2\" color=\"error\">\n                                    {formik.errors.password}\n                                </Typography>\n                            ) : null}\n                        </Box>\n                        <Button\n                            variant='contained'\n                            color='success'\n                            type='submit'\n                            disabled={!(formik.dirty && formik.isValid)}\n                        >\n                            Register\n                        </Button>\n                        <Button\n                            variant='contained'\n                            color='error'\n                            onClick={() => {\n                                navigate('/users');\n                            }}\n                        >\n                            Cancel\n                        </Button>\n                    </form>\n                </CardContent>\n            </Card>\n        </Container>\n    );\n};\n\nexport default RegisterPage;\n","/Users/josu/Documents/GitHub/UEK223-Team1/react_frontend/src/Router/Unauthorized.tsx",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/index.tsx",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/App.tsx",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Contexts/ActiveUserContext.tsx",["158","159"],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Router/Router.tsx",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/organisms/Navbar.tsx",["160"],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Services/AuthorityService.ts",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Services/UserService.ts",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/config/Api.ts",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Router/PrivateRoute.tsx",["161","162"],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/Router/Unauthorized.tsx",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/UserPage/UserProfile.tsx",["163"],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/LoginPage/LoginPage.tsx",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/UserPage/UserPage.tsx",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/HomePage.tsx",[],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/RegisterPage/RegisterPage.tsx",["164"],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/pages/UserPage/UserTable.tsx",["165"],"/Users/josu/Documents/GitHub/M450_AravinthCastro/Project/react_frontend/src/components/molecules/UserForm/UserForm.tsx",["166"],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":9,"column":9,"nodeType":"173","messageId":"174","endLine":9,"endColumn":20},{"ruleId":"175","severity":1,"message":"176","line":173,"column":6,"nodeType":"177","endLine":173,"endColumn":8,"suggestions":"178"},{"ruleId":"171","severity":1,"message":"179","line":6,"column":10,"nodeType":"173","messageId":"174","endLine":6,"endColumn":19},{"ruleId":"171","severity":1,"message":"180","line":7,"column":10,"nodeType":"173","messageId":"174","endLine":7,"endColumn":16},{"ruleId":"171","severity":1,"message":"181","line":16,"column":8,"nodeType":"173","messageId":"174","endLine":16,"endColumn":25},{"ruleId":"171","severity":1,"message":"182","line":33,"column":23,"nodeType":"173","messageId":"174","endLine":33,"endColumn":30},{"ruleId":"171","severity":1,"message":"180","line":5,"column":9,"nodeType":"173","messageId":"174","endLine":5,"endColumn":15},{"ruleId":"175","severity":1,"message":"183","line":135,"column":8,"nodeType":"177","endLine":135,"endColumn":10,"suggestions":"184"},{"ruleId":"171","severity":1,"message":"182","line":28,"column":23,"nodeType":"173","messageId":"174","endLine":28,"endColumn":30},{"ruleId":"171","severity":1,"message":"172","line":9,"column":9,"nodeType":"173","messageId":"174","endLine":9,"endColumn":20},{"ruleId":"175","severity":1,"message":"176","line":173,"column":6,"nodeType":"177","endLine":173,"endColumn":8,"suggestions":"185"},{"ruleId":"171","severity":1,"message":"180","line":5,"column":9,"nodeType":"173","messageId":"174","endLine":5,"endColumn":15},{"ruleId":"171","severity":1,"message":"179","line":6,"column":10,"nodeType":"173","messageId":"174","endLine":6,"endColumn":19},{"ruleId":"171","severity":1,"message":"180","line":7,"column":10,"nodeType":"173","messageId":"174","endLine":7,"endColumn":16},{"ruleId":"175","severity":1,"message":"183","line":135,"column":8,"nodeType":"177","endLine":135,"endColumn":10,"suggestions":"186"},{"ruleId":"171","severity":1,"message":"182","line":28,"column":23,"nodeType":"173","messageId":"174","endLine":28,"endColumn":30},{"ruleId":"171","severity":1,"message":"181","line":16,"column":8,"nodeType":"173","messageId":"174","endLine":16,"endColumn":25},{"ruleId":"171","severity":1,"message":"182","line":33,"column":23,"nodeType":"173","messageId":"174","endLine":33,"endColumn":30},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"@typescript-eslint/no-unused-vars","'UserProfile' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["189"],"'Authority' is defined but never used.","'Button' is defined but never used.","'activeUserContext' is defined but never used.","'newUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'activeUserContext'. Either include it or remove the dependency array.",["190"],["191"],["192"],"no-global-assign","no-unsafe-negation",{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"193","fix":"197"},{"desc":"195","fix":"198"},"Update the dependencies array to be: [loadActiveUser]",{"range":"199","text":"200"},"Update the dependencies array to be: [activeUserContext]",{"range":"201","text":"202"},{"range":"203","text":"200"},{"range":"204","text":"202"},[5472,5474],"[loadActiveUser]",[4667,4669],"[activeUserContext]",[5472,5474],[4667,4669]]